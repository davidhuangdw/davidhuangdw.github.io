<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Contest | David's Blog]]></title>
  <link href="http://davidhuangdw.github.io/blog/categories/contest/atom.xml" rel="self"/>
  <link href="http://davidhuangdw.github.io/"/>
  <updated>2015-11-15T12:16:46+08:00</updated>
  <id>http://davidhuangdw.github.io/</id>
  <author>
    <name><![CDATA[David]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gcj 2015 Round 1b Problem_a Counter Culture]]></title>
    <link href="http://davidhuangdw.github.io/blog/2015/11/15/gcj-2015-round-1b-a-dot-counter-culture/"/>
    <updated>2015-11-15T11:49:56+08:00</updated>
    <id>http://davidhuangdw.github.io/blog/2015/11/15/gcj-2015-round-1b-a-dot-counter-culture</id>
    <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p><a href="https://code.google.com/codejam/contest/8224486/dashboard#s=p0&amp;a=0">problem link: A.counter_culture</a></p>

<p>In the Counting Poetry Slam, a performer takes the microphone, chooses a number N, and counts aloud from 1 to N. That is, she starts by saying 1, and then repeatedly says the number that is 1 greater than the previous number she said, stopping after she has said N.</p>

<p>It’s your turn to perform, but you find this process tedious, and you want to add a twist to speed it up: sometimes, instead of adding 1 to the previous number, you might reverse the digits of the number (removing any leading zeroes that this creates). For example, after saying “16”, you could next say either “17” or “61”; after saying “2300”, you could next say either “2301” or “32”. You may reverse as many times as you want (or not at all) within a performance.</p>

<p>The first number you say must be 1; what is the fewest number of numbers you will need to say in order to reach the number N? 1 and N count toward this total. If you say the same number multiple times, each of those times counts separately.</p>

<!--more-->

<h3 id="limits">Limits</h3>

<p>$1 \le N \le 10^{14}$</p>

<h2 id="analysis">Analysis</h2>

<p>We have a few observations:</p>

<ol>
  <li>Because increase or reverse are symmetric operations, so count 1 to N, equals count N to 1;</li>
  <li>when N to 1, we will always reach number like ‘10..001’ with same length, because reverse_operation won’t decrease digit length;</li>
  <li>only 2 ways from N to ‘10..001’:
    <ol>
      <li>decrease directly</li>
      <li>decrease suffix, reverse, decrease prefix
        <ul>
          <li>for example: 12345 =&gt; 12001 =&gt; 10021 =&gt; 10001, which takes (345-1)+1+(21-1)=365 steps</li>
        </ul>
      </li>
    </ol>
  </li>
</ol>

<p>Complexity: per digit length a round, and only string manipulation per round, so it takes $O(log^2{n})$</p>

<p>``` ruby full ruby code: a.counter.rb
def split(n, pre_sz)
  n = n.to_s
  [n[0…pre_sz], n[pre_sz..-1]]
end</p>

<p>def by_rev(n, base, pre_sz)
  # from ‘10…001’ to n: count by rev once</p>

<p>pre, suf = split(n, pre_sz)
  suf_cnt = suf.to_i - 1 # e.g. ‘12345’ =&gt; ‘12001’
  pre_cnt = pre.reverse.to_i - 1 # e.g. ‘10021’ =&gt; ‘10001’</p>

<p>suf_cnt + 1 + pre_cnt
end</p>

<p>def count(n)
  n = n.to_i
  return n if n&lt;= 11
  return count(n-1)+1 if n.to_s[-1] == ‘0’</p>

<p>sz = n.to_s.size
  base = “1#{‘0’<em>(sz-2)}1” # from ‘10…001’
  base_cnt = count(‘9’</em>(sz-1))+2</p>

<p>offset = n-base.to_i
  base_cnt + [offset, by_rev(n, base, sz/2)].min
end</p>

<p>def main
  ncase,icase = gets,1
  while n=gets
    puts “Case ##{icase}: #{count(n)}”
    icase += 1
  end
end</p>

<p>main
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gcj 2015 Round 1a Problem b.haircut]]></title>
    <link href="http://davidhuangdw.github.io/blog/2015/11/09/gcj-2015-round-1a-b-dot-haircut/"/>
    <updated>2015-11-09T17:52:06+08:00</updated>
    <id>http://davidhuangdw.github.io/blog/2015/11/09/gcj-2015-round-1a-b-dot-haircut</id>
    <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p><a href="https://code.google.com/codejam/contest/4224486/dashboard#s=p1&amp;a=1">problem link: B.haircut</a></p>

<p>You are waiting in a long line to get a haircut at a trendy barber shop. The shop has $B$ barbers on duty, and they are numbered 1 through $B$. It always takes the kth barber exactly $M_k$ minutes to cut a customer’s hair, and a barber can only cut one customer’s hair at a time. Once a barber finishes cutting hair, he is immediately free to help another customer.</p>

<p>While the shop is open, the customer at the head of the queue always goes to the lowest-numbered barber who is available. When no barber is available, that customer waits until at least one becomes available.</p>

<p>You are the $N$th person in line, and the shop has just opened. Which barber will cut your hair?</p>

<!--more-->

<h3 id="limits">Limits</h3>

<p>$1 ≤ N ≤ 109$</p>

<p>$1 ≤ B ≤ 1000$</p>

<p>$1 ≤ M_k ≤ 100000$</p>

<h2 id="analysis">Analysis</h2>

<p>What to iterate/search?
Search what can help us, (a)validate current result is valid or not(whether exactly n customers served), (b) and on the other hand, find out which barber it is?</p>

<p>It seems given ‘which barber’ doesn’t help a lot.
How about search nth customer’s start time t? It seems we can use the last start_time to calculate total amount of customers, and then make a comparison/validation.</p>

<p>Given time t, we could calculate the amount of customers whose start_time &lt;= t:</p>

<p>1) any customer must come before or equal t, including each barber’s last customer: $(n_k-1)M_k \le t$</p>

<p>2) also, each barber’s first excluded customer must came later than t: $((n_k+1)-1) \cdot M_k &gt; t$</p>

<p>so, we have</p>

<p>$n_k-1 \le \frac{t}{M_k} &lt; n_k \Rightarrow n_k = \lfloor{\frac{t}{M_k}}\rfloor + 1$</p>

<p>So we can binary_search on t, and validate each t using calculated_customer_amount:
whose complexity is $O(b \cdot log(n \cdot mi_{max}))$</p>

<h2 id="implementation">Implementation</h2>

<p>``` c++ full code: b.haircut.cpp
#include <iostream>
using namespace std;</iostream></p>

<p>typedef long long ll;
const int MB=1000+5;
const ll MM=100*1000+5;
int T;
ll n,b,m[MB];</p>

<p>ll customer_amount_le(ll t){
    if(t&lt;0) return 0;
    ll sum = 0;
    for(int i=0; i&lt;b; i++)
        sum += t/m[i]+1;
    return sum;
}</p>

<p>ll least_t_with_enough_amount(){
    ll low=0, high=n*MM, res=low;
    while(low &lt;= high){
        ll md = (low+high)»1;
        ll amount = customer_amount_le(md);
        if(amount &gt;= n){ res=md; high=md-1;}
        else low=md+1;
    }
    return res;
}</p>

<p>int position(){
    ll t = least_t_with_enough_amount();
    ll amount_at_t = n - customer_amount_le(t-1);
    for(int i=0; i&lt;b; i++){
        if(t%m[i] == 0) amount_at_t–;
        if(amount_at_t==0) return i;
    }
    return -1000; //never reach
}</p>

<p>int main(){
    cin»T;
    for(int icase=1; icase&lt;=T; icase++){
        cin»b»n;
        for(int i=0; i&lt;b; i++)
            cin»m[i];</p>

<pre><code>    cout&lt;&lt;"Case #"&lt;&lt;icase&lt;&lt;": "&lt;&lt;position()+1&lt;&lt;endl;
}
return 0; }
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
